/*
    The Scopes Compiler Infrastructure
    This file is distributed under the MIT License.
    See LICENSE.md for details.
*/

#include "symbol_enum.inc"
#include "ppmacro.inc"

#include "hash.hpp"

#include <string.h>
#include <assert.h>
#include <iostream>
#include <unordered_set>

#define NEWMODE

using namespace std;

static std::unordered_set<uint64_t> seen_hashes;

void write_entry(const char *symbol, const char *str) {
    using namespace scopes;
    auto len = strlen(str);
    auto id = len?hash_bytes(str, len):0;
#ifdef NEWMODE
    cout << "    " << symbol << " = " << id << "ull, /*" << str << "*/" << endl;
#else
    cout << "    " << symbol << ", /*" << str << "*/" << endl;
#endif
    if (seen_hashes.count(id)) {
        assert(false && "duplicate hash");
    }
    seen_hashes.insert(id);
}

int main(int argc, char *argv[]) {
    cout << "// this file is autogenerated by gensyms.cpp" << endl;
    cout << "#ifndef SCOPES_KNOWN_SYMBOLS_HPP" << endl;
    cout << "#define SCOPES_KNOWN_SYMBOLS_HPP" << endl;
    cout << endl;
    cout << "namespace scopes {" << endl;
    cout << endl;
    cout << "enum KnownSymbol : unsigned long long {" << endl;

#define T(sym, name) \
    write_entry( #sym, name);
    SCOPES_SYMBOLS()
#undef T

#define T(sym) \
    write_entry(SCOPES_STRINGIFY(SYM_SPIRV_StorageClass ## sym), #sym);
    B_SPIRV_STORAGE_CLASS()
#undef T

#define T(sym) \
    write_entry(SCOPES_STRINGIFY(SYM_SPIRV_BuiltIn ## sym), "spirv." #sym);
    B_SPIRV_BUILTINS()
#undef T
#define T(sym) \
    write_entry(SCOPES_STRINGIFY(SYM_SPIRV_ExecutionMode ## sym), #sym);
    B_SPIRV_EXECUTION_MODE()
#undef T
#define T(sym) \
    write_entry(SCOPES_STRINGIFY(SYM_SPIRV_Dim ## sym), #sym);
    B_SPIRV_DIM()
#undef T
#define T(sym) \
    write_entry(SCOPES_STRINGIFY(SYM_SPIRV_ImageFormat ## sym), #sym);
    B_SPIRV_IMAGE_FORMAT()
#undef T
#define T(sym) \
    write_entry(SCOPES_STRINGIFY(SYM_SPIRV_ImageOperand ## sym), #sym);
    B_SPIRV_IMAGE_OPERAND()
#undef T

#ifndef NEWMODE
    cout << "    SYM_Count," << endl;
#endif
    cout << "};" << endl;
    cout << endl;
    cout << "} // namespace scopes" << endl;
    cout << endl;
    cout << "#endif // SCOPES_SYMBOL_ENUM_HPP" << endl;
    return 0;
}
